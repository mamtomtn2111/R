library(dplyr)
leaflet() %>%
addTiles() %>%
addMarkers(lng = 105.831030, lat = 21.654640,
popup = "Heeeeeeeeeeeeeee")
#Using the plotly to make the interactive graphs
library(plotly)
library(ggplot2)
data(mpg, package = )
# Library highcharter làm việc với dữ liệu dài
library(highcharter)
library(gapminder)
data(gapminder)
asia <- gapminder %>%
filter(continent == "Asia") %>%
select(year, country, lifeExp)
library(tidyr)  # using for transformation shape of Dataset
library(highchart)
plotData <- spread(asia, year, lifeExp)
#Make the highcharter graph
highchart() %>%
hc_xAxis(categories = plotdata$year) %>%
hc_add_series(name = "Vietnam", data = plotdata$Vietnam) %>%
hc_add_series(name = "China", data = plotdata$China) %>%
hc_add_series(name = "Iran", data = plotdata$Iran) %>%
hc_add_series(name = "Cambodia", data = plotdata$Cambodia) %>%
hc_add_series(name = "Japan", data = plotdata$Japan) %>%
hc_add_series(name = "Myanmar", data = plotdata$Myanmar) -> plot1
plot1
plot1 <- plot1 %>%
hc_title(text = "Life expectancy by country in asia",
margin = 30, align = "center",
style = list(color = "stellblue", fontWeight = "bold")) %>%
hc_subtitle(text = "From 1952 to 2007", margin = 20, align = "left",
style = list(color = "red", fontWeight = "bold")) %>%
hc_credits(enabled = TRUE, text = "Gapminder data",
href = "http://gapminder.com") %>%
hc_legend(align = "left", layout = "vertical",
x = 0, y = 100, verticalAlign = "top") %>%
hc_tooltip(crosshairs = TRUE, backgroundColors = "#FCFFC5",
shared = TRUE, borderWidth = 4) %>%
hc_exporting(enabled = TRUE)
plot1
library(leaflet)
#install.packages("leaflet")
#install.packages("dplyr")
library(dplyr)
leaflet() %>%
addTiles() %>%
addMarkers(lng = 105.831030, lat = 21.654640,
popup = "Heeeeeeeeeeeeeee")
#Using the plotly to make the interactive graphs
library(plotly)
library(ggplot2)
data(mpg, package = )
# Library highcharter làm việc với dữ liệu dài
library(highcharter)
library(gapminder)
data(gapminder)
asia <- gapminder %>%
filter(continent == "Asia") %>%
select(year, country, lifeExp)
library(tidyr)  # using for transformation shape of Dataset
library(highchart)
plotdata <- spread(asia, year, lifeExp)
#Make the highcharter graph
highchart() %>%
hc_xAxis(categories = plotdata$year) %>%
hc_add_series(name = "Vietnam", data = plotdata$Vietnam) %>%
hc_add_series(name = "China", data = plotdata$China) %>%
hc_add_series(name = "Iran", data = plotdata$Iran) %>%
hc_add_series(name = "Cambodia", data = plotdata$Cambodia) %>%
hc_add_series(name = "Japan", data = plotdata$Japan) %>%
hc_add_series(name = "Myanmar", data = plotdata$Myanmar) -> plot1
plot1
plot1 <- plot1 %>%
hc_title(text = "Life expectancy by country in asia",
margin = 30, align = "center",
style = list(color = "stellblue", fontWeight = "bold")) %>%
hc_subtitle(text = "From 1952 to 2007", margin = 20, align = "left",
style = list(color = "red", fontWeight = "bold")) %>%
hc_credits(enabled = TRUE, text = "Gapminder data",
href = "http://gapminder.com") %>%
hc_legend(align = "left", layout = "vertical",
x = 0, y = 100, verticalAlign = "top") %>%
hc_tooltip(crosshairs = TRUE, backgroundColors = "#FCFFC5",
shared = TRUE, borderWidth = 4) %>%
hc_exporting(enabled = TRUE)
plot1
plotdata <- spread(asia, year, lifeExp)
#Make the highcharter graph
highchart() %>%
hc_xAxis(categories = plotdata$year) %>%
hc_add_series(name = "Vietnam", data = plotdata$Vietnam) %>%
hc_add_series(name = "China", data = plotdata$China) %>%
hc_add_series(name = "Iran", data = plotdata$Iran) %>%
hc_add_series(name = "Cambodia", data = plotdata$Cambodia) %>%
hc_add_series(name = "Japan", data = plotdata$Japan) %>%
hc_add_series(name = "Myanmar", data = plotdata$Myanmar) -> plot1
plot1
plotdata <- spread(asia, year, lifeExp)
View(plotdata)
View(plotdata)
View(plotData)
library(leaflet)
#install.packages("leaflet")
#install.packages("dplyr")
library(dplyr)
leaflet() %>%
addTiles() %>%
addMarkers(lng = 105.831030, lat = 21.654640,
popup = "Heeeeeeeeeeeeeee")
#Using the plotly to make the interactive graphs
library(plotly)
library(ggplot2)
data(mpg, package = )
# Library highcharter làm việc với dữ liệu dài
library(highcharter)
library(gapminder)
data(gapminder)
asia <- gapminder %>%
filter(continent == "Asia") %>%
select(year, country, lifeExp)
library(tidyr)  # using for transformation shape of Dataset
library(highchart)
plotdata <- spread(asia, country, lifeExp)
#Make the highcharter graph
highchart() %>%
hc_xAxis(categories = plotdata$year) %>%
hc_add_series(name = "Vietnam", data = plotdata$Vietnam) %>%
hc_add_series(name = "China", data = plotdata$China) %>%
hc_add_series(name = "Iran", data = plotdata$Iran) %>%
hc_add_series(name = "Cambodia", data = plotdata$Cambodia) %>%
hc_add_series(name = "Japan", data = plotdata$Japan) %>%
hc_add_series(name = "Myanmar", data = plotdata$Myanmar) -> plot1
plot1
plot1 <- plot1 %>%
hc_title(text = "Life expectancy by country in asia",
margin = 30, align = "center",
style = list(color = "stellblue", fontWeight = "bold")) %>%
hc_subtitle(text = "From 1952 to 2007", margin = 20, align = "left",
style = list(color = "red", fontWeight = "bold")) %>%
hc_credits(enabled = TRUE, text = "Gapminder data",
href = "http://gapminder.com") %>%
hc_legend(align = "left", layout = "vertical",
x = 0, y = 100, verticalAlign = "top") %>%
hc_tooltip(crosshairs = TRUE, backgroundColors = "#FCFFC5",
shared = TRUE, borderWidth = 4) %>%
hc_exporting(enabled = TRUE)
plot1
library(leaflet)
#install.packages("leaflet")
#install.packages("dplyr")
library(dplyr)
leaflet() %>%
addTiles() %>%
addMarkers(lng = 105.831030, lat = 21.654640,
popup = "Heeeeeeeeeeeeeee")
#Using the plotly to make the interactive graphs
library(plotly)
library(ggplot2)
data(mpg, package = )
# Library highcharter làm việc với dữ liệu dài
library(highcharter)
library(gapminder)
data(gapminder)
asia <- gapminder %>%
filter(continent == "Asia") %>%
select(year, country, lifeExp)
library(tidyr)  # using for transformation shape of Dataset
library(highchart)
plotdata <- spread(asia, year, lifeExp)
#Make the highcharter graph
highchart() %>%
hc_xAxis(categories = plotdata$year) %>%
hc_add_series(name = "Vietnam", data = plotdata$Vietnam) %>%
hc_add_series(name = "China", data = plotdata$China) %>%
hc_add_series(name = "Iran", data = plotdata$Iran) %>%
hc_add_series(name = "Cambodia", data = plotdata$Cambodia) %>%
hc_add_series(name = "Japan", data = plotdata$Japan) %>%
hc_add_series(name = "Myanmar", data = plotdata$Myanmar) -> plot1
plot1
plot1 <- plot1 %>%
hc_title(text = "Life expectancy by country in asia",
margin = 30, align = "center",
style = list(color = "stellblue", fontWeight = "bold")) %>%
hc_subtitle(text = "From 1952 to 2007", margin = 20, align = "left",
style = list(color = "red", fontWeight = "bold")) %>%
hc_credits(enabled = TRUE, text = "Gapminder data",
href = "http://gapminder.com") %>%
hc_legend(align = "left", layout = "vertical",
x = 0, y = 100, verticalAlign = "top") %>%
hc_tooltip(crosshairs = TRUE, backgroundColors = "#FCFFC5",
shared = TRUE, borderWidth = 4) %>%
hc_exporting(enabled = TRUE)
plot1
View(plotData)
View(plotdata)
plotdata <- spread(asia, country, lifeExp)
View(plotdata)
benfordlaw(4.222)
benford_law <- function(d){
prob_d <- log10(1+1/d)
return(prob_d)
}
myvector <- c(1:9)
benford_prob <- benford_law(myvector)
View(benford_law)
benford_prob <- benford_law(myvector)
print(myvector)
barplot(benford_prob, names.arg = myvector, xlab = "THe First Digit",
ylab = "Probability", main = "Probability simulation",
ylim = c(o, 0.35), col = "cornflowerblue", border = "black")
barplot(benford_prob, names.arg = myvector, xlab = "THe First Digit",
ylab = "Probability", main = "Probability simulation",
ylim = c(0, 0.35), col = "cornflowerblue", border = "black")
myvector <- c(1:14)
benford_law <- function(d){
prob_d <- log10(1+1/d)
return(prob_d)
}
myvector <- c(1:14)
benford_prob <- benford_law(myvector)
barplot(benford_prob, names.arg = myvector, xlab = "THe First Digit",
ylab = "Probability", main = "Probability simulation",
ylim = c(0, 0.35), col = "cornflowerblue", border = "black")
benford_law <- function(d){
prob_d <- log10(1+1/d)
return(prob_d)
}
myvector <- c(1:10)
benford_prob <- benford_law(myvector)
barplot(benford_prob, names.arg = myvector, xlab = "THe First Digit",
ylab = "Probability", main = "Probability simulation",
ylim = c(0, 0.35), col = "cornflowerblue", border = "black")
x <- runif(100, 10, 50)
x <- runif(100, 10, 50)
x <- runif(100, 10, 50)
print(ketqua)
myvector <- c(1.2, 2.3333,3.14, 5432, 5.11, 1.14)
ketqua <- first_digit(myvector)
print(ketqua)
ketqua <- first_digit(myvector)
print(ketqua)
ketqua <- first_digit(myvector)
first_digit <- function(n){
substr(gsub('[.]','',n), 1, 1)
}
#Test function
myvector <- c(1.2, 2.3333,3.14, 5432, 5.11, 1.14)
ketqua <- first_digit(myvector)
print(ketqua)
prob_firsts_digit <- function(x){
data.frame(table(first_digit(x)/length(x)))
}
prob_firsts_digit(myvecto) -> ketqua2
prob_firsts_digit(myvector) -> ketqua2
prob_firsts_digit(ketqua) -> ketqua2
prob_firsts_digit(myvector) -> ketqua2
prob_firsts_digit <- function(x){
data.frame(table(first_digit(x))/length(x))
}
prob_firsts_digit(myvector) -> ketqua2
View(ketqua2)
N <- 1000
set.seed(1234)
x1 <- runif(N, 0, 100)
mydata1 <- prob_firsts_digit(x1)
names(mydata1) <- c("Digits","Probability")
mydata1[-1,] -> mydata1
lines(x = my_object[,1],y = mydata1$Probability, col = "red", lwd = 2,
type = "b", pch = 10, cex = 0.5, bg = "red")
lines(x = benford_prob[,1],y = mydata1$Probability, col = "red", lwd = 2,
type = "b", pch = 10, cex = 0.5, bg = "red")
library(benford.analysis)
install.packages("benford.analysis")
library(benford.analysis)
data("corporate.payment")
gc()
library(benford.analysis)
data("corporate.payment")
library(benford.analysis)
data("corporate.payment")
benford_test <- benford(corporate.payment$Amount)
plot(benford_test)
benford_test
suspects <- getSuspects(benford_test, corporate.payment)
suspects <- getSuspects(benford_test, corporate.payment)
library(imager)
library(imagerExtra)
library(benford.analysis)
library(dplyr)
# Load the image
ngoctrinh <- load.image("G:/Tài liệu học tập/2021-2022/HK2/Trực quan hóa dữ liệu/FileProject/TH16-2/image.jpg") %>%
grayscale()
# Make the DCT (Discrete Cosine Transformation)
ngoctrinh_df <- DCT2D(ngoctrinh) %>%
as.data.frame()
# Apply the Benford
bfd.ngoctrinh <- benford(ngoctrinh_df$value, number.of.digits = 1,
discrete = T, round = 1, sign = "both")
# Plot the result
plot(bfd.ngoctrinh
benford_law <- function(d){
prob_d <- log10(1+1/d)
return(prob_d)
}
myvector <- c(1:10)
benford_prob <- benford_law(myvector)
barplot(benford_prob, names.arg = myvector, xlab = "THe First Digit",
ylab = "Probability", main = "Probability simulation",
ylim = c(0, 0.35), col = "cornflowerblue", border = "black")
x <- runif(100, 10, 50)
#function to get the first digit
first_digit <- function(n){
substr(gsub('[.]','',n), 1, 1)
}
#Test function
myvector <- c(1.2, 2.3333,3.14, 5432, 5.11, 1.14)
ketqua <- first_digit(myvector)
print(ketqua)
prob_firsts_digit <- function(x){
data.frame(table(first_digit(x))/length(x))
}
prob_firsts_digit(myvector) -> ketqua2
N <- 1000
set.seed(1234)
x1 <- runif(N, 0, 100)
mydata1 <- prob_firsts_digit(x1)
names(mydata1) <- c("Digits","Probability")
mydata1[-1,] -> mydata1
lines(x = benford_prob[,1],y = mydata1$Probability, col = "red", lwd = 2,
type = "b", pch = 10, cex = 0.5, bg = "red")
x2 <- runif(100000, 0, 10000)
mydata2 <- prob_firsts_digit(x2)
#library benford
library(benford.analysis)
data("corporate.payment")
benford_test <- benford(corporate.payment$Amount)
plot(benford_test)
benford_test
#Check the suspicious elements (payments - transactions)
suspects <- getSuspects(benford_test, corporate.payment)
library(imager)
library(imagerExtra)
library(benford.analysis)
library(dplyr)
# Load the image
ngoctrinh <- load.image("G:/Tài liệu học tập/2021-2022/HK2/Trực quan hóa dữ liệu/FileProject/TH16-2/image.jpg") %>%
grayscale()
# Make the DCT (Discrete Cosine Transformation)
ngoctrinh_df <- DCT2D(ngoctrinh) %>%
as.data.frame()
# Apply the Benford
bfd.ngoctrinh <- benford(ngoctrinh_df$value, number.of.digits = 1,
discrete = T, round = 1, sign = "both")
# Plot the result
plot(bfd.ngoctrinh)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
install_tinytex()
install.packages("tinytex")
tinytex::install_tinytex()
library(dplyr)
library(nycflights13)
library(ggplot2)
data(nycflight13)
library(dplyr)
library(nycflights13)
library(ggplot2)
data(nycflight13)
#Câu 1
library(dplyr)
library(nycflights13)
library(ggplot2)
data("nycflights13")
#Câu 1
data(flights)
force(flights)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
summary(cars)
library(dplyr)
library(nycflights13)
library(ggplot2)
data(flights)
View(flights)
flights %>% filter(day == 1, month == 1, year == 1)
flights %>% filter(day == 1, month == 1, year == 1)
library(dplyr)
library(nycflights13)
library(ggplot2)
library(magrittr)
data(flights)
flights %>% filter(day == 1, month == 1, year == 1)
data(flights)
flights %>%
filter(day == 1, month == 1, year == 1)
View(flights)
flights %>%
filter(day == 1, month == 1, year == 1)
flights %>%
filter(day == 1, month == 1, year == 1)
flights %>%
filter(day == 1, month == 1, year == 1)
flights %>%
filter(day == 1, month == 1, year == 1)
flights %>%
filter(day == 1, month == 1, year == 1)
explanatory<-readRDS('filename.rds')
knitr::opts_chunk$set(echo = TRUE)
flights %>%
filter(day == 1, month == 1, year == 1)
flights %>%
filter(day == 1, month == 1, year == 1)
flights %>%
filter(day == 1, month == 1, year == 1) %>% len()
flights %>%
filter(day == 1, month == 1, year == 1) %>% count(flights)
View(flights)
flights %>%
filter(day == 1, month == 1, year == 1) ->flightsFirstDay
count(flightsFirstDay)
View(flightsFirstDay)
flights %>%
filter(day == 1, month == 1, year == 1)
flights %>%
filter(day == 1 & month == 1 & year == 1) ->flightsFirstDay
count(flightsFirstDay)
flights %>%
filter(day == 1 & month == 1 & year == 1) ->flightsFirstDay
View(flights)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
flights %>%
filter(day == 1, month == 1, year == 1)
library(dplyr)
library(nycflights13)
library(ggplot2)
library(magrittr)
data(flights)
flights %>%
filter(day == 1, month == 1, year == 1)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, cache = TRUE)
flights %>%
filter(day == 1, month == 1, year == 1)
library(dplyr)
library(nycflights13)
library(ggplot2)
library(magrittr)
data(flights)
library(dplyr)
library(nycflights13)
library(ggplot2)
library(magrittr)
data(flights)
flights %>%
filter(day == 1, month == 1, year == 1)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(dplyr)
library(nycflights13)
library(ggplot2)
library(magrittr)
data(flights)
flights %>%
filter(day == 1, month == 1, year == 1)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(dplyr)
library(nycflights13)
library(ggplot2)
library(magrittr)
data(flights)
flights %>%
filter(day == 1, month == 1, year == 1)
flights %>%
filter(day == 1, month == 1, year == 1)
library(dplyr)
library(nycflights13)
library(ggplot2)
data(flights)
#Câu 1
flights %>%
filter(day == 1 & month == 1 & year == 1) ->flightsFirstDay
count(flightsFirstDay)
data(flights)
#Câu 1
flights %>%
filter(day == 1 || month == 1 || year == 1) ->flightsFirstDay
count(flightsFirstDay)
data(flights)
#Câu 1
flights %>%
filter(day == 1 || month == 1 || year == 1) ->flightsFirstDay
count(flightsFirstDay)
View(flightsFirstDay)
View(flights)
View(flightsFirstDay)
flights %>%
filter(day == 1 && month == 1 && year == 1) ->flightsFirstDay
data(flights)
#Câu 1
flights %>%
filter(day == 1 & month == 1 & year == 1) ->flightsFirstDay
View(flightsFirstDay)
knitr::opts_chunk$set(echo = TRUE, Warning = FALSE)
summary(cars)
plot(pressure)
plot(pressure)
plot(pressure)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE, Warning = FALSE)
summary(cars)
plot(pressure)
