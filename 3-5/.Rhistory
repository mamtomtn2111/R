test_vector <- c(1:20)
tong <- function(x){
total = 0
for(i in 1:length(x)){
total = total + x[i]
}
return(total)
}
tong(test_vector)
test_vector <- c(1:20)
tong <- function(x){
total = 0
for(i in 1:length(x)){
total = total + x[i]
}
return(total)
}
tong(test_vector)
var(test_vector)
#Tính hệ số tương quan
cov(test_vector)
cov(test_vector)
sd(test_vector)
#Tính hệ số tương quan
cov(test_vector)
trungbinh(test_vector)
trungbinh <- function(x){
return sum(x)/length(x)
}
trungbinh(test_vector)
trungbinh <- function(x){
return sum(x)/length(x)
}
trungbinh <- function(x){
return (sum(x)/length(x))
}
trungbinh(test_vector)
trungbinh <- function(x){
return (sum(x)/%length(x))
}
trungbinh <- function(x){
return (sum(x)//length(x))
}
trungbinh <- function(x){
return (sum(x)/length(x))
}
trungbinh <- function(x){
return (sum(x)%length(x))
}
#Phương sai
var(test_vector)
sd(test_vector)
print("Dùng hàm: ",var(test_vector))
print("Dùng hàm: " +var(test_vector))
phuongsai <-function(x){
binhphuong <- (x-trungbinh(x))^2
for (i in 1:length(x)){
total = total + binhphuong[i]
}
ketqua <- total/(length(x)-1)
return(ketqua)
}
print(phuongsai(test_vector))
phuongsai <-function(x){
total = 0
binhphuong <- (x-trungbinh(x))^2
for (i in 1:length(x)){
total = total + binhphuong[i]
}
ketqua <- total/(length(x)-1)
return(ketqua)
}
print(phuongsai(test_vector))
#Độ lệch chuẩn
paste0("Hàm sd ",sd(test_vector))
phuongsai <-function(x){
total = 0
binhphuong <- (x-trungbinh(x))^2
for (i in 1:length(x)){
total = total + binhphuong[i]
}
ketqua <- total/(length(x)-1)
return(ketqua)
}
print(phuongsai(test_vector))
lechchuan <- function(x){
ketqua <- sqrt(phuongsai(x))
return(ketqua)
}
paste0("Hàm lệch chuẩn: ",lechchuan(test_vector))
paste0("Hàm sd ",sd(test_vector))
benhat(test_vector)
# Max
benhat <- function(x){
Min <- x[1]
for(i in 1:length(x)){
if(Min > x[i]){
Min = x[i]
}
}
return (Min)
}
benhat(test_vector)
div(3,4)
div(c(0:3),2)
div(c(-5:5), 5)
#Tính hệ số tương quan
cov(test_vector)
#Tính hệ số tương quan
cov(test_vector,test_vector)
cov(test_vector,test_vector)
HeSoTuongQuan <- function(x,y){
return((phuonngsai(x)*phuongsai(y))/(lechchuan(x)*lechchuan(y)))
}
HeSoTuongQuan(test_vector, test_vector)
HeSoTuongQuan <- function(x,y){
return((phuongsai(x)*phuongsai(y))/(lechchuan(x)*lechchuan(y)))
}
HeSoTuongQuan(test_vector, test_vector)
x1 <- c(1:5)
y1 <- c(6:10)
HeSoTuongQuan(x1, y1)
HeSoTuongQuan <- function(x,y){
return(phuongsai(x)*phuongsai(y))
}
x1 <- c(1:5)
y1 <- c(6:10)
HeSoTuongQuan(x1, y1)
HeSoTuongQuan <- function(x,y){
return((phuongsai(x)*phuongsai(y))/(lechchuan(x)*lechchuan(y)))
}
x1 <- c(1:5)
y1 <- c(6:10)
HeSoTuongQuan(x1, y1)
install.packages(c("tidyverse","dslabs"))
library(tidyverse)
library(dslabs)
data(murders)
gc()
#install.packages(c("tidyverse","dslabs"))
library(tidyverse)
library(dslabs)
data(murders)
force(murders)
View(murders)
print(murders.is_dataframe)
print(scr(murders))
murders.head(10)
head(muders)
head(murders,10)
tail(murders,10)
murders.shape()
dim(murders)
murders.column
names(muders)
rownames(murders)
columnnames(murders)
colnames(murders)
typeof(murders)
is.data.frame(murders)
str(murders)
count(murders)
colnames(murders)
is.factor(murders$region)
names(murders)
murders
str(murders)
#Truy cập vào biến trong dataframe
#Check độ dài của biến pop
length(murders$population)
nlevels(murders$region)
table(murders$region)
states <- murders$state
ranks <- rank(murders$population)
ind <- order(murders$population)
my_df <- data.frame(states[ind], rank(ind))
View(my_df)
View(murders)
my_df <- data.frame(states[ind], ranks(ind))
my_df <- data.frame(states[ind], rank(ind))
View(my_df)
ind <- order(-murders$population)
my_df <- data.frame(states[ind], rank(ind)
ind <- order(-murders$population)
my_df <- data.frame(states[ind], rank(ind))
ind <- order(-murders$population)
my_df <- data.frame(states[ind], rank(ind)
s
states <- murders$state
ranks <- rank(murders$population)
ind <- order(-murders$population)
my_df <- data.frame(states[ind], rank(ind))
View(my_df)
ind <- order(murders$population)
my_df <- data.frame(states[ind], rank(ind))
View(my_df)
CriminalIdx <- order(murders$total)
CriminalIdx <- order(-murders$total)
StateHighestCriminal = data.frame(head(states[CriminalIdx]))
View(StateHighestCriminal)
View(murders)
StateHighestCriminal = data.frame(head(states[CriminalIdx],10))
View(StateHighestCriminal)
